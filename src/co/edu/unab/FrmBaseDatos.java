package co.edu.unab;

import co.edu.unab.db.DbConexion;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Properties;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 * Formulario de carga de archivos KML de redes
 * @author Feisar Moreno
 * @date 24/02/2014
 */
public class FrmBaseDatos extends javax.swing.JInternalFrame {
    private final FrmPrincipal frmPrincipal;
    
    private class AvanceProceso implements Runnable {
        private boolean controlCorrer = true;
        private int cantPuntosAvance = 0;
        
        @Override
        @SuppressWarnings("SleepWhileInLoop")
        public void run() {
            while (this.controlCorrer) {
                try {
                    Thread.sleep(500);
                    this.mostrarAvance();
                } catch (InterruptedException e) {}
            }
        }
        
        public void setControlCorrer(boolean controlCorrer) {
            this.controlCorrer = controlCorrer;
        }
        
        private void mostrarAvance() {
            String mensajeAvance = "Processing";
            
            this.cantPuntosAvance++;
            this.cantPuntosAvance = this.cantPuntosAvance % 3;
            mensajeAvance += "....".substring(0, this.cantPuntosAvance + 1);
            lblAvance.setText(mensajeAvance);
        }
    }
    
    /**
     * Creates new form FrmCargarRedes
     * @param frmPrincipal Formulario que contiene a este formulario
     */
    public FrmBaseDatos(FrmPrincipal frmPrincipal) {
        initComponents();
        
        this.frmPrincipal = frmPrincipal;
        
        //Se limpia el texto de avance de carga
        this.lblAvance.setVisible(false);
        this.lblAvance.setText(" ");
        
        //Se cargan los atributos de conexión en la tabla
        this.cargarTablaAtributosConexion();
    }
    
    public FrmPrincipal getFrmPrincipal() {
        return frmPrincipal;
    }
    
    private void cargarTablaAtributosConexion() {
        //Nombres de las columnas
        String[] nombCols = new String[2];
        nombCols[0] = "Attribute";
        nombCols[1] = "Value";
        
        //Se obtienen los atributos de conexión
        LinkedHashMap<String, String> mapaAtributos = DbConexion.getMapaAtributosConexion();
        
        String [][] cuerpoTabla = new String[mapaAtributos.size()][0];
        int contAux = 0;
        for (String atributoAux : mapaAtributos.keySet()) {
            String valorAux = mapaAtributos.get(atributoAux);
            
            String[] registroAux = new String[2];
            registroAux[0] = atributoAux;
            registroAux[1] = valorAux;
            
            cuerpoTabla[contAux] = registroAux;
            contAux++;
        }

        DefaultTableModel tablaRedes = new DefaultTableModel(cuerpoTabla, nombCols) {
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return columnIndex == 1;
            }
        };

        this.tblAtributos.setModel(tablaRedes);
        TableColumnModel columnas = this.tblAtributos.getColumnModel();
        columnas.getColumn(0).setPreferredWidth(100);
        columnas.getColumn(1).setPreferredWidth(200);
    }
    
    private LinkedHashMap<String, String> obtenerAtributosTabla() {
        //Se recorre la tabla
        LinkedHashMap<String, String> mapaAtributos = new LinkedHashMap<>();
        
        for (int i = 0; i < this.tblAtributos.getRowCount(); i++) {
            String nombreAtributo = this.tblAtributos.getValueAt(i, 0).toString();
            String valorAtributo = this.tblAtributos.getValueAt(i, 1).toString();
            
            mapaAtributos.put(nombreAtributo, valorAtributo);
        }
        
        return mapaAtributos;
    }
    
    public void habilitarComponentes(boolean habilitar) {
        this.btnVerificarServidor.setEnabled(habilitar);
        this.btnVerificarBaseDatos.setEnabled(habilitar);
        this.btnGuardarAtributos.setEnabled(habilitar);
        this.btnCrearBaseDatos.setEnabled(habilitar);
        this.tblAtributos.setEnabled(habilitar);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblAvance = new javax.swing.JLabel();
        btnVerificarServidor = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAtributos = new javax.swing.JTable();
        btnVerificarBaseDatos = new javax.swing.JButton();
        btnCrearBaseDatos = new javax.swing.JButton();
        btnGuardarAtributos = new javax.swing.JButton();

        setClosable(true);
        setTitle("Database configuration");

        lblAvance.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblAvance.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblAvance.setText(".");

        btnVerificarServidor.setText("Check Server Connection");
        btnVerificarServidor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerificarServidorActionPerformed(evt);
            }
        });

        tblAtributos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblAtributos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(tblAtributos);

        btnVerificarBaseDatos.setText("Check Database Connection");
        btnVerificarBaseDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerificarBaseDatosActionPerformed(evt);
            }
        });

        btnCrearBaseDatos.setText("Create Database");
        btnCrearBaseDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearBaseDatosActionPerformed(evt);
            }
        });

        btnGuardarAtributos.setText("Save Connection Data");
        btnGuardarAtributos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarAtributosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(lblAvance, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnGuardarAtributos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)))
                .addGap(10, 10, 10))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCrearBaseDatos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnVerificarBaseDatos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnVerificarServidor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnVerificarServidor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnVerificarBaseDatos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCrearBaseDatos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnGuardarAtributos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblAvance)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
        
    private void btnVerificarServidorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerificarServidorActionPerformed
        //Se inhabilitan los componentes
        this.habilitarComponentes(false);
        
        //Se inicia el hilo que muestra el avance del proceso
        final AvanceProceso tareaProceso = new AvanceProceso();
        Thread hiloProcesar = new Thread(tareaProceso, "Processing");
        hiloProcesar.start();
        
        Runnable procesoValidacion = new Runnable() {
            @Override
            public void run() {
                lblAvance.setVisible(true);
                
                //Se obtienen los parámetros de conexión
                LinkedHashMap<String, String> mapaAtributos = obtenerAtributosTabla();
                
                String host = mapaAtributos.get("host");
                String port = mapaAtributos.get("port");
                String user = mapaAtributos.get("user");
                String password = mapaAtributos.get("password");
                
                DbConexion dbConexion = new DbConexion();
                String resultado = dbConexion.verificarConexion(host, port, user, password);
                
                lblAvance.setVisible(false);
                if (resultado.equalsIgnoreCase("OK")) {
                    JOptionPane.showMessageDialog(frmPrincipal, "Connection successful.", "Connection Test", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(frmPrincipal, "Connection failure with message\n[" + resultado + "].", "Connection Test", JOptionPane.WARNING_MESSAGE);
                }
                habilitarComponentes(true);
            }
        };
        
        Thread hiloValidacion = new Thread(procesoValidacion, "procesarValidación");
        hiloValidacion.start();
    }//GEN-LAST:event_btnVerificarServidorActionPerformed

    private void btnVerificarBaseDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerificarBaseDatosActionPerformed
        //Se inhabilitan los componentes
        this.habilitarComponentes(false);
        
        //Se inicia el hilo que muestra el avance del proceso
        final AvanceProceso tareaProceso = new AvanceProceso();
        Thread hiloProcesar = new Thread(tareaProceso, "Processing");
        hiloProcesar.start();
        
        Runnable procesoValidacion = new Runnable() {
            @Override
            public void run() {
                lblAvance.setVisible(true);
                
                //Se obtienen los parámetros de conexión
                LinkedHashMap<String, String> mapaAtributos = obtenerAtributosTabla();
                
                String host = mapaAtributos.get("host");
                String port = mapaAtributos.get("port");
                String user = mapaAtributos.get("user");
                String password = mapaAtributos.get("password");
                String database = mapaAtributos.get("database");
                
                if (!database.trim().equals("")) {
                    DbConexion dbConexion = new DbConexion();
                    String resultado = dbConexion.verificarConexion(host, port, user, password, database);
                    
                    lblAvance.setVisible(false);
                    if (resultado.equalsIgnoreCase("OK")) {
                        JOptionPane.showMessageDialog(frmPrincipal, "Connection successful.", "Connection Test", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(frmPrincipal, "Connection failure with message\n[" + resultado + "].", "Connection Test", JOptionPane.WARNING_MESSAGE);
                    }
                } else {
                    lblAvance.setVisible(false);
                    JOptionPane.showMessageDialog(frmPrincipal, "Connection not established with message:\n[Database name is empty].", "Connection Test", JOptionPane.WARNING_MESSAGE);
                }
                
                habilitarComponentes(true);
            }
        };
        
        Thread hiloValidacion = new Thread(procesoValidacion, "procesarValidación");
        hiloValidacion.start();
    }//GEN-LAST:event_btnVerificarBaseDatosActionPerformed

    private void btnGuardarAtributosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarAtributosActionPerformed
        //Se inhabilitan los componentes
        this.habilitarComponentes(false);
        
        //Se inicia el hilo que muestra el avance del proceso
        final AvanceProceso tareaProceso = new AvanceProceso();
        Thread hiloProcesar = new Thread(tareaProceso, "Processing");
        hiloProcesar.start();
        
        Runnable procesoGuardar = new Runnable() {
            @Override
            public void run() {
                lblAvance.setVisible(true);
                
                //Se obtienen los parámetros de conexión
                LinkedHashMap<String, String> mapaAtributos = obtenerAtributosTabla();
                
                String host = mapaAtributos.get("host");
                String port = mapaAtributos.get("port");
                String user = mapaAtributos.get("user");
                String password = mapaAtributos.get("password");
                String database = mapaAtributos.get("database");
                
                String mensajeGuardar;
                try {
                    Properties props = new Properties();
                    props.setProperty("host", host);
                    props.setProperty("port", port);
                    props.setProperty("user", user);
                    props.setProperty("password", password);
                    props.setProperty("database", database);
                    File f = new File("NETPPA.properties");
                    FileOutputStream out = new FileOutputStream(f);
                    props.store(out, "Database Connection");
                    
                    mensajeGuardar = "OK";
                } catch (IOException e) {
                    mensajeGuardar = e.toString();
                }
                
                lblAvance.setVisible(false);
                if (mensajeGuardar.equalsIgnoreCase("OK")) {
                    JOptionPane.showMessageDialog(frmPrincipal, "Connection data saved.", "Database Connection", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(frmPrincipal, "Connection data not saved with message:\n[" + mensajeGuardar + "].", "Database Connection", JOptionPane.WARNING_MESSAGE);
                }
                
                habilitarComponentes(true);
            }
        };
        
        Thread hiloGuardar = new Thread(procesoGuardar, "procesarGuardar");
        hiloGuardar.start();
    }//GEN-LAST:event_btnGuardarAtributosActionPerformed

    private void btnCrearBaseDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearBaseDatosActionPerformed
        //Se inhabilitan los componentes
        this.habilitarComponentes(false);
        
        //Se inicia el hilo que muestra el avance del proceso
        final AvanceProceso tareaProceso = new AvanceProceso();
        Thread hiloProcesar = new Thread(tareaProceso, "Processing");
        hiloProcesar.start();
        
        Runnable procesoCrearDB = new Runnable() {
            @Override
            public void run() {
                lblAvance.setVisible(true);
                
                //Se obtienen los parámetros de conexión
                LinkedHashMap<String, String> mapaAtributos = obtenerAtributosTabla();

                String host = mapaAtributos.get("host");
                String port = mapaAtributos.get("port");
                String user = mapaAtributos.get("user");
                String password = mapaAtributos.get("password");
                String database = mapaAtributos.get("database");
                
                //Se crea la base de datos
                DbConexion dbConexion = new DbConexion();
                
                String resultado = dbConexion.crearBaseDatos(host, port, user, password, database);
                if (resultado.equalsIgnoreCase("OK")) {
                    //Se ejecuta el script de base de datos
                    resultado = dbConexion.ejecutarScript(host, port, user, password, database, "scriptdb.sql");
                }
                
                lblAvance.setVisible(false);
                if (resultado.equalsIgnoreCase("OK")) {
                    JOptionPane.showMessageDialog(frmPrincipal, "Database created.", "Database Creation", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(frmPrincipal, "Database not created with message:\n[" + resultado + "].", "Database Creation", JOptionPane.WARNING_MESSAGE);
                }
                
                habilitarComponentes(true);
            }
        };
        
        Thread hiloCrearDB = new Thread(procesoCrearDB, "procesarCrearDB");
        hiloCrearDB.start();
    }//GEN-LAST:event_btnCrearBaseDatosActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCrearBaseDatos;
    private javax.swing.JButton btnGuardarAtributos;
    private javax.swing.JButton btnVerificarBaseDatos;
    private javax.swing.JButton btnVerificarServidor;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAvance;
    private javax.swing.JTable tblAtributos;
    // End of variables declaration//GEN-END:variables
}
